services:
  x-bft:
    &bft-base
    platform: linux/amd64
    user: "${USER_UID:-1001}:${USER_GID:-1001}"
    # https://github.com/unicitynetwork/bft-core/pkgs/container/bft-core
    image: ghcr.io/unicitynetwork/bft-core:49d48f8fd3686aff1066d98eff2512e5fc71713c
  bft-root:
    <<: *bft-base
    volumes:
      - ./data/genesis-root:/genesis/root
      - ./data/genesis:/genesis
    healthcheck:
      test: [ "CMD", "nc", "-zv", "bft-root", "8000" ]
      interval: 5s
    networks:
      - default
    entrypoint: ["/busybox/sh", "-c"]
    command:
      - |
        if [ -f /genesis/root/node-info.json ] && [ -f /genesis/trust-base.json ] && [ -f /genesis/root/trust-base-signed.json ]; then
          echo "Genesis files already exist, skipping initialization."
        else
          echo "Creating root genesis..." &&
          ubft root-node init --home /genesis/root -g &&
          echo "Creating root trust base..." &&
          ubft trust-base generate --home /genesis --network-id 3 --node-info /genesis/root/node-info.json &&
          echo "Signing root trust base..." &&
          ubft trust-base sign --home /genesis/root --trust-base /genesis/trust-base.json
        fi
        echo "Starting root node..." &&
        ubft root-node run --home /genesis/root --address "/ip4/$(hostname -i)/tcp/8000" --trust-base /genesis/trust-base.json --rpc-server-address "$(hostname -i):8002" &&
        ls -l /genesis/root
        echo "Root node started successfully."

  bft-aggregator-genesis-gen:
    <<: *bft-base
    volumes:
      - ./data/genesis-root:/genesis/root
      - ./data/genesis:/genesis
    depends_on:
      bft-root:
        condition: service_healthy
    ports:
      - "11003:11003"
    networks:
      - default
    entrypoint: ["/busybox/sh", "-c"]
    command:
      - |
        if [ -f /genesis/aggregator/node-info.json ] && [ -f /genesis/shard-conf-7_0.json ]; then
          echo "Aggregator genesis and config already exist, skipping initialization."
        else
          echo "Creating aggregator genesis..." &&
          ubft shard-node init --home /genesis/aggregator --generate &&
          echo "Creating aggregator partition configuration..." &&
          ubft shard-conf generate --home /genesis --t2-timeout 5000 --network-id 3 --partition-id 7 --partition-type-id 7 --epoch-start 10 --node-info=/genesis/aggregator/node-info.json &&
          echo "Creating aggregator partition state..." &&
          ubft shard-conf genesis --home "/genesis/aggregator" --shard-conf /genesis/shard-conf-7_0.json
        fi
        chmod -R 755 /genesis/aggregator
        chmod 644 /genesis/shard-conf-7_0.json
        chmod 644 /genesis/trust-base.json
        chmod -R 755 /genesis/root
        echo "Permissions fixed."
        ls -l /genesis/aggregator &&
        ls -l /genesis/

  upload-configurations:
    image: curlimages/curl:8.13.0
    user: "${USER_UID:-1001}:${USER_GID:-1001}"
    depends_on:
      bft-root:
        condition: service_healthy
      bft-aggregator-genesis-gen:
        condition: service_completed_successfully
    restart: on-failure
    volumes:
      - ./data/genesis:/genesis
    command: |
      /bin/sh -c "
        echo Uploading aggregator configuration &&
        curl -X PUT -H 'Content-Type: application/json' -d @/genesis/shard-conf-7_0.json http://bft-root:8002/api/v1/configurations
      "

  mongodb:
    image: mongo:7.0
    container_name: aggregator-mongodb
    user: "${USER_UID:-1001}:${USER_GID:-1001}"
    restart: unless-stopped
    ports:
      - "27017:27017"
    networks:
      - default
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: aggregator
    volumes:
      - ./data/mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
  aggregator-1: &aggregator-base
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aggregator-1
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - default
    volumes:
      - ./data/genesis:/app/bft-config
    environment: &environment-base
      # Server Configuration
      PORT: "3000"
      HOST: "0.0.0.0"
      CONCURRENCY_LIMIT: "1000"
      ENABLE_DOCS: "true"
      ENABLE_CORS: "true"

      # Database Configuration
      MONGODB_URI: "mongodb://admin:password@mongodb:27017/aggregator?authSource=admin"
      MONGODB_DATABASE: "aggregator"
      MONGODB_CONNECT_TIMEOUT: "10s"
      MONGODB_SERVER_SELECTION_TIMEOUT: "5s"

      # High Availability Configuration
      DISABLE_HIGH_AVAILABILITY: "false"
      LOCK_TTL_SECONDS: "30"
      LEADER_HEARTBEAT_INTERVAL: "10s"
      LEADER_ELECTION_POLLING_INTERVAL: "5s"

      # Logging Configuration
      LOG_LEVEL: "debug"
      LOG_FORMAT: "json"
      LOG_ENABLE_JSON: "true"

      # Processing Configuration
      BATCH_LIMIT: "1000"

      # BFT Configuration
      # Enable BFT support and specify configuration file paths
      BFT_ENABLED: "true"
      BFT_KEY_CONF_FILE: "/app/bft-config/aggregator/keys.json"
      BFT_SHARD_CONF_FILE: "/app/bft-config/shard-conf-7_0.json"
      BFT_TRUST_BASE_FILE: "/app/bft-config/trust-base.json"
      # BFT_BOOTSTRAP_ADDRESSES will be set dynamically by the entrypoint script
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        # Extract the first root node's nodeId from trust-base.json
        if [ -f /app/bft-config/trust-base.json ]; then
          ROOT_NODE_ID=$$(cat /app/bft-config/trust-base.json | grep -o '"nodeId": "[^"]*"' | head -1 | cut -d'"' -f4)
          if [ -n "$$ROOT_NODE_ID" ]; then
            export BFT_BOOTSTRAP_ADDRESSES="/dns4/bft-root/tcp/8000/p2p/$$ROOT_NODE_ID"
            echo "Set BFT_BOOTSTRAP_ADDRESSES to: $$BFT_BOOTSTRAP_ADDRESSES"
          else
            echo "Warning: Could not extract nodeId from trust-base.json"
            exit 1
          fi
        else
          echo "Error: trust-base.json not found at /app/bft-config/trust-base.json"
          exit 1
        fi
        
        # Start the aggregator application
        exec /app/aggregator

    depends_on:
      bft-aggregator-genesis-gen:
        condition: service_completed_successfully
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-zv", "aggregator-1", "3000" ]
      interval: 30s
      timeout: 10s
      retries: 3
  aggregator-2:
    <<: *aggregator-base
    container_name: aggregator-2
    ports:
      - "3001:3001"
    environment:
      <<: *environment-base
      PORT: "3001"
    healthcheck:
      test: [ "CMD", "nc", "-zv", "aggregator-2", "3001" ]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  default: